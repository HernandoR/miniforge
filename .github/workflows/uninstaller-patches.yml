name: Build uninstaller patches
on: 
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.MINIFORGE_NAME }}-uninstaller-patch-${{ matrix.OS_NAME }}-${{ matrix.ARCH }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            ARCH: x86_64
            TARGET_PLATFORM: win-64
            MINIFORGE_NAME: "Miniforge3"
            OS_NAME: "Windows"

          - os: windows-latest
            ARCH: x86_64
            TARGET_PLATFORM: win-64
            MINIFORGE_NAME: "Mambaforge"
            OS_NAME: "Windows"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v2.2.0
      with:
        miniforge-version: "latest"
        miniforge-variant: Mambaforge
        use-mamba: true
      if: contains(matrix.OS_NAME, 'Windows')

    - name: Build and test miniforge
      env:
        ARCH: ${{ matrix.ARCH }}
        MINIFORGE_NAME: ${{ matrix.MINIFORGE_NAME }}
        OS_NAME: ${{ matrix.OS_NAME }}
        DOCKERIMAGE: ${{ matrix.DOCKERIMAGE }}
        DOCKER_ARCH: ${{ matrix.DOCKER_ARCH }}
        TARGET_PLATFORM: ${{ matrix.TARGET_PLATFORM }}
        TEST_IMAGE_NAMES: ${{ matrix.TEST_IMAGE_NAMES }}
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          export MINIFORGE_VERSION=${GITHUB_REF##*/};
        fi
        export EXT=exe
        echo "WINDIR:$WINDIR"
        source /c/Miniconda3/Scripts/activate;
        source build_miniforge_win.sh;
        # Copy for latest release
        cp build/$MINIFORGE_NAME-*-$OS_NAME-$ARCH.$EXT build/$MINIFORGE_NAME-uninstaller-patch-$OS_NAME-$ARCH.$EXT
        ls -alh build
      shell: bash

    - name: Upload miniforge to Github artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        path: build/${{ matrix.MINIFORGE_NAME }}-uninstaller-patch-${{ matrix.OS_NAME }}-${{ matrix.ARCH }}*
        name: ${{ matrix.MINIFORGE_NAME }}-uninstaller-patch-${{ matrix.OS_NAME }}-${{ matrix.ARCH }}

